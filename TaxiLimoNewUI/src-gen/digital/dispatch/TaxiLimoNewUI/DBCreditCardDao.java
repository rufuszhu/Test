package digital.dispatch.TaxiLimoNewUI;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import digital.dispatch.TaxiLimoNewUI.DBCreditCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBCREDIT_CARD.
*/
public class DBCreditCardDao extends AbstractDao<DBCreditCard, Long> {

    public static final String TABLENAME = "DBCREDIT_CARD";

    /**
     * Properties of entity DBCreditCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property First4CardNum = new Property(1, String.class, "first4CardNum", false, "FIRST4_CARD_NUM");
        public final static Property Last4CardNum = new Property(2, String.class, "last4CardNum", false, "LAST4_CARD_NUM");
        public final static Property HolderName = new Property(3, String.class, "holderName", false, "HOLDER_NAME");
        public final static Property ExpiryMonth = new Property(4, String.class, "expiryMonth", false, "EXPIRY_MONTH");
        public final static Property ExpiryYear = new Property(5, String.class, "expiryYear", false, "EXPIRY_YEAR");
        public final static Property Zip = new Property(6, String.class, "zip", false, "ZIP");
        public final static Property NickName = new Property(7, String.class, "nickName", false, "NICK_NAME");
        public final static Property Token = new Property(8, String.class, "token", false, "TOKEN");
        public final static Property CardBrand = new Property(9, String.class, "cardBrand", false, "CARD_BRAND");
    };


    public DBCreditCardDao(DaoConfig config) {
        super(config);
    }
    
    public DBCreditCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBCREDIT_CARD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FIRST4_CARD_NUM' TEXT," + // 1: first4CardNum
                "'LAST4_CARD_NUM' TEXT," + // 2: last4CardNum
                "'HOLDER_NAME' TEXT," + // 3: holderName
                "'EXPIRY_MONTH' TEXT," + // 4: expiryMonth
                "'EXPIRY_YEAR' TEXT," + // 5: expiryYear
                "'ZIP' TEXT," + // 6: zip
                "'NICK_NAME' TEXT," + // 7: nickName
                "'TOKEN' TEXT," + // 8: token
                "'CARD_BRAND' TEXT);"); // 9: cardBrand
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBCREDIT_CARD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBCreditCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String first4CardNum = entity.getFirst4CardNum();
        if (first4CardNum != null) {
            stmt.bindString(2, first4CardNum);
        }
 
        String last4CardNum = entity.getLast4CardNum();
        if (last4CardNum != null) {
            stmt.bindString(3, last4CardNum);
        }
 
        String holderName = entity.getHolderName();
        if (holderName != null) {
            stmt.bindString(4, holderName);
        }
 
        String expiryMonth = entity.getExpiryMonth();
        if (expiryMonth != null) {
            stmt.bindString(5, expiryMonth);
        }
 
        String expiryYear = entity.getExpiryYear();
        if (expiryYear != null) {
            stmt.bindString(6, expiryYear);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(7, zip);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(8, nickName);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(9, token);
        }
 
        String cardBrand = entity.getCardBrand();
        if (cardBrand != null) {
            stmt.bindString(10, cardBrand);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBCreditCard readEntity(Cursor cursor, int offset) {
        DBCreditCard entity = new DBCreditCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // first4CardNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // last4CardNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // holderName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // expiryMonth
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // expiryYear
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zip
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nickName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // token
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // cardBrand
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBCreditCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirst4CardNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLast4CardNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHolderName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExpiryMonth(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExpiryYear(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZip(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNickName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setToken(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCardBrand(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBCreditCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBCreditCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
