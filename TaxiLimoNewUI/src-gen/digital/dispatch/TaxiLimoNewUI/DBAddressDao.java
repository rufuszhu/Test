package digital.dispatch.TaxiLimoNewUI;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import digital.dispatch.TaxiLimoNewUI.DBAddress;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBADDRESS.
*/
public class DBAddressDao extends AbstractDao<DBAddress, Long> {

    public static final String TABLENAME = "DBADDRESS";

    /**
     * Properties of entity DBAddress.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Unit = new Property(1, String.class, "unit", false, "UNIT");
        public final static Property StreetName = new Property(2, String.class, "streetName", false, "STREET_NAME");
        public final static Property HouseNumber = new Property(3, String.class, "houseNumber", false, "HOUSE_NUMBER");
        public final static Property District = new Property(4, String.class, "district", false, "DISTRICT");
        public final static Property Province = new Property(5, String.class, "province", false, "PROVINCE");
        public final static Property Country = new Property(6, String.class, "country", false, "COUNTRY");
        public final static Property NickName = new Property(7, String.class, "nickName", false, "NICK_NAME");
        public final static Property Latitude = new Property(8, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(9, Double.class, "longitude", false, "LONGITUDE");
        public final static Property IsFavoriate = new Property(10, Boolean.class, "isFavoriate", false, "IS_FAVORIATE");
        public final static Property FullAddress = new Property(11, String.class, "fullAddress", false, "FULL_ADDRESS");
    };


    public DBAddressDao(DaoConfig config) {
        super(config);
    }
    
    public DBAddressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBADDRESS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UNIT' TEXT," + // 1: unit
                "'STREET_NAME' TEXT," + // 2: streetName
                "'HOUSE_NUMBER' TEXT," + // 3: houseNumber
                "'DISTRICT' TEXT," + // 4: district
                "'PROVINCE' TEXT," + // 5: province
                "'COUNTRY' TEXT," + // 6: country
                "'NICK_NAME' TEXT," + // 7: nickName
                "'LATITUDE' REAL," + // 8: latitude
                "'LONGITUDE' REAL," + // 9: longitude
                "'IS_FAVORIATE' INTEGER," + // 10: isFavoriate
                "'FULL_ADDRESS' TEXT);"); // 11: fullAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBADDRESS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBAddress entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(2, unit);
        }
 
        String streetName = entity.getStreetName();
        if (streetName != null) {
            stmt.bindString(3, streetName);
        }
 
        String houseNumber = entity.getHouseNumber();
        if (houseNumber != null) {
            stmt.bindString(4, houseNumber);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(5, district);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(6, province);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(7, country);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(8, nickName);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(9, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(10, longitude);
        }
 
        Boolean isFavoriate = entity.getIsFavoriate();
        if (isFavoriate != null) {
            stmt.bindLong(11, isFavoriate ? 1l: 0l);
        }
 
        String fullAddress = entity.getFullAddress();
        if (fullAddress != null) {
            stmt.bindString(12, fullAddress);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBAddress readEntity(Cursor cursor, int offset) {
        DBAddress entity = new DBAddress( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // unit
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // streetName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // houseNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // district
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // province
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // country
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nickName
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // latitude
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // longitude
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isFavoriate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // fullAddress
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBAddress entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnit(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStreetName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHouseNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDistrict(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvince(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCountry(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNickName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLatitude(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setLongitude(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setIsFavoriate(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setFullAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBAddress entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBAddress entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
